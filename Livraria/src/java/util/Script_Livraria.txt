CREATE DATABASE livraria;
USE livraria;

CREATE TABLE assunto(
    id int not null AUTO_INCREMENT,
    assunto varchar(30),
    descricaoAssunto varchar(30),
    nomeAssunto varchar(30),
    
    CONSTRAINT PK_Assunto PRIMARY KEY(id)
);

CREATE TABLE autor(
	id int not null AUTO_INCREMENT,
    nomeAutor varchar(30),
    
    CONSTRAINT PK_Autor PRIMARY KEY(id)
);

CREATE TABLE editora(
	id int not null AUTO_INCREMENT,
    nomeEditora varchar(30),
    
    CONSTRAINT PK_Editora PRIMARY KEY(id)   
    
);

CREATE TABLE usuario(
	id int not null AUTO_INCREMENT,
    email varchar(45),
    nomeUsuario varchar(30),
    senha varchar(45),
    tipo varchar(30),
    
    CONSTRAINT PK_Usuario PRIMARY KEY(id)
);

CREATE TABLE livro(
	id int not null AUTO_INCREMENT,
    ano date,
    edicao int,
    isbn varchar(30),
    titulo varchar(30),
    Assunto_id int,
    Editora_id int,
    
    CONSTRAINT PK_Livro PRIMARY KEY(id),
    CONSTRAINT FK_Livro_Assunto FOREIGN KEY(Assunto_id)
    	REFERENCES assunto(id),
    CONSTRAINT FK_Livro_Editora FOREIGN KEY(Editora_id)
    	REFERENCES editora(id)
);

CREATE TABLE exemplar(
	id int not null AUTO_INCREMENT,
    circular boolean,
    Livro_id int,
    
    CONSTRAINT PK_Exemplar PRIMARY KEY(id),
    CONSTRAINT FK_Exemplar_Livro FOREIGN KEY(Livro_id)
    	REFERENCES livro(id)
);

CREATE TABLE emprestimo(
	id int not null AUTO_INCREMENT,
    dataEmprestimo datetime,
    dataPrevista datetime,
    dataDevolucao datetime,
    Exemplar_id int,
    Usuario_id int,
    
    CONSTRAINT PK_Emprestimo PRIMARY KEY(id),
    CONSTRAINT FK_Emprestimo_Exemplar FOREIGN KEY(Exemplar_id)
    	REFERENCES exemplar(id),
    CONSTRAINT FK_Emprestimo_Usuario FOREIGN KEY(Usuario_id)
    	REFERENCES usuario(id)
);


CREATE TABLE autorLivro(
        Livro_id int NOT null,
	Autor_id int NOT null,
    
    CONSTRAINT FK_AutorLivro_Autor FOREIGN KEY(Autor_id)
    	REFERENCES autor(id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_AutorLivro_Livro FOREIGN KEY(Livro_id)
    	REFERENCES livro(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE reserva(
	id int not null AUTO_INCREMENT,
    dataReserva datetime,    
    cancelar varchar(7),
    Exemplar_id int,
    Usuario_id int,
    Emprestimo_id int,
    
    CONSTRAINT PK_Reserva PRIMARY KEY(id),
    CONSTRAINT FK_Reserva_Exemplar FOREIGN KEY(Exemplar_id)
    	REFERENCES exemplar(id),
    CONSTRAINT FK_Reserva_Usuario FOREIGN KEY(Usuario_id)
    	REFERENCES usuario(id),
    CONSTRAINT FK_Reserva_Emprestimo FOREIGN KEY(Emprestimo_id)
    	REFERENCES emprestimo(id)
);

----------------------------------------------------------------------------------------------------------------
Consultas no JasperReports:

1 - Relatório de todos os livros e o respectivo número de exemplares cadastrados no sistema.

select l.titulo as 'Título', 
	l.isbn as 'ISBN',		
        l.edicao as 'Edição',
        l.ano as 'Ano',
        a.nomeAssunto as 'Assunto',
        ed.nomeEditora as 'Editora',       
    	COUNT(case when e.circular = 1 then e.id end) as 'Circular',
        COUNT(case when e.circular = 0 then e.id end) as 'Não-Circular'
from livro l 
        LEFT join exemplar e 
        ON l.id = e.Livro_id
        INNER JOIN assunto a
        ON l.Assunto_id = a.id
        INNER JOIN editora ed
        ON l.Editora_id = ed.id
Group by l.id Order by l.id

2 - Relatório de todos os livros emprestados.

SELECT l.id as 'Id', 
        l.titulo as 'Título', 
	l.isbn as 'ISBN', 
	l.edicao as 'Edição',
	l.ano as 'Ano', 
	ed.nomeEditora as 'Editora', 
	a.nomeAssunto as 'Assunto'
FROM emprestimo e
        INNER JOIN exemplar ex
        ON ex.id = e.Exemplar_id
        INNER JOIN livro l
        on l.id = ex.Livro_id
        INNER JOIN editora ed
        ON ed.id = l.Editora_id
        INNER JOIN assunto a
        ON l.Assunto_id = a.id
WHERE e.dataDevolucao is null

3 - Relatório de todos os livros reservados.

SELECT l.id as 'Id',
		l.titulo as 'Título', 
        l.isbn as 'ISBN', 
        l.edicao as 'Edição', 
        l.ano as 'Ano', 
        ed.nomeEditora as 'Editora', 
        a.nomeAssunto as 'Assunto' 
FROM reserva r 
        LEFT JOIN exemplar ex 
        ON ex.id = r.Exemplar_id 
        INNER JOIN livro l 
        ON l.id = ex.Livro_id 
        INNER JOIN editora ed 
        ON l.Editora_id = ed.id 
        INNER JOIN assunto a 
        ON l.Assunto_id = a.id 
WHERE r.cancelar IS NULL AND r.Emprestimo_id IS NULL

4 - Relatório de todos os usuários e seus respectivos dados cadastrais.

SELECT u.id as 'Id', 
        u.nomeUsuario as 'Nome', 
	u.email as 'E-mail', 
	u.tipo as 'Tipo' 
from usuario u

5 - Relatório de todos os livros em atraso a devolução.

SELECT l.id as 'Id', 
        l.titulo as 'Título', 
        l.isbn as 'ISBN', 
        l.edicao as 'Edição',
        l.ano as 'Ano', 
        ed.nomeEditora as 'Editora', 
        a.nomeAssunto as 'Assunto'
FROM emprestimo e
        INNER JOIN exemplar ex
        ON ex.id = e.Exemplar_id
        INNER JOIN livro l
        on l.id = ex.Livro_id
        INNER JOIN editora ed
        ON ed.id = l.Editora_id
        INNER JOIN assunto a
        ON l.Assunto_id = a.id
WHERE e.dataDevolucao is null AND e.dataPrevista < current_date

----------------------------------------------------------------------------------------------------------------
1 - Um gráfico informando quantos livros foram reservados por mês, considerando os últimos 3 meses.

SELECT (CASE (MONTH  (r.dataReserva))
                WHEN 1 THEN 'Jan'
                WHEN 2 THEN 'Fev'
                WHEN 3 THEN 'Mar'
                WHEN 4 THEN 'Abr'
                WHEN 5 THEN 'Mai'
                WHEN 6 THEN 'Jun'
                WHEN 7 THEN 'Jul'
                WHEN 8 THEN 'Ago'
                WHEN 9 THEN 'Set'
                WHEN 10 THEN 'Out'
                WHEN 11 THEN 'Nov'
                WHEN 12 THEN 'Dez' END) as 'MÊS',
		COUNT(*) as 'Livros'
from reserva r WHERE MONTH (r.dataReserva) BETWEEN (MONTH (CURRENT_DATE) - 3) AND (MONTH (CURRENT_DATE) - 1 ) 
GROUP BY MONTH (r.dataReserva);

----------------------------------------------------------------------------------------------------------------
2 - Um gráfico informando quantos livros foram emprestados por mês, considerando os últimos 3 meses.

SELECT (CASE (MONTH  (e.dataEmprestimo))
                WHEN 1 THEN 'Jan'
                WHEN 2 THEN 'Fev'
                WHEN 3 THEN 'Mar'
                WHEN 4 THEN 'Abr'
                WHEN 5 THEN 'Mai'
                WHEN 6 THEN 'Jun'
                WHEN 7 THEN 'Jul'
                WHEN 8 THEN 'Ago'
                WHEN 9 THEN 'Set'
                WHEN 10 THEN 'Out'
                WHEN 11 THEN 'Nov'
                WHEN 12 THEN 'Dez' END) as 'MÊS',
		COUNT(*) as 'Livros'
from  emprestimo e WHERE  MONTH (e.dataEmprestimo) BETWEEN (MONTH (CURRENT_DATE) - 3) AND (MONTH (CURRENT_DATE) - 1)
GROUP BY MONTH (e.dataEmprestimo);

-----------------------------------------------------------------
3 - Um	gráfico	informando quantos livros foram	reservados por categoria, considerando os últimos 3 meses.

SELECT (CASE (MONTH  (r.dataReserva))
                WHEN 1 THEN 'Jan'
                WHEN 2 THEN 'Fev'
                WHEN 3 THEN 'Mar'
                WHEN 4 THEN 'Abr'
                WHEN 5 THEN 'Mai'
                WHEN 6 THEN 'Jun'
                WHEN 7 THEN 'Jul'
                WHEN 8 THEN 'Ago'
                WHEN 9 THEN 'Set'
                WHEN 10 THEN 'Out'
                WHEN 11 THEN 'Nov'
                WHEN 12 THEN 'Dez' END) as 'MÊS',
		COUNT(*) as 'Livros',
		a.nomeAssunto as 'Assunto'      
from reserva r
		INNER JOIN exemplar ex
        on r.Exemplar_id = ex.id
        INNER JOIN livro l
        on l.id = ex.Livro_id
        INNER JOIN assunto a
        on a.id = l.Assunto_id
WHERE MONTH (r.dataReserva) BETWEEN (MONTH (CURRENT_DATE) - 3) AND (MONTH (CURRENT_DATE) - 1 ) 
GROUP BY MONTH (r.dataReserva), a.nomeAssunto;

----------------------------------------------------------------------------------------------------------------
4 - Um	gráfico	informando quantos livros foram	emprestados por	categoria, considerando os últimos 3 meses.

SELECT (CASE (MONTH  (e.dataEmprestimo))
                WHEN 1 THEN 'Jan'
                WHEN 2 THEN 'Fev'
                WHEN 3 THEN 'Mar'
                WHEN 4 THEN 'Abr'
                WHEN 5 THEN 'Mai'
                WHEN 6 THEN 'Jun'
                WHEN 7 THEN 'Jul'
                WHEN 8 THEN 'Ago'
                WHEN 9 THEN 'Set'
                WHEN 10 THEN 'Out'
                WHEN 11 THEN 'Nov'
                WHEN 12 THEN 'Dez' END) as 'MÊS',
		COUNT(*) as 'Livros',
		a.nomeAssunto as 'Assunto'		
from  emprestimo e
		INNER JOIN exemplar ex
        	on e.Exemplar_id = ex.id
        	INNER JOIN livro l
        	on l.id = ex.Livro_id
        	INNER JOIN assunto a
        	on a.id = l.Assunto_id
WHERE  MONTH (e.dataEmprestimo) BETWEEN (MONTH (CURRENT_DATE) - 3) AND (MONTH (CURRENT_DATE) - 1)
GROUP BY MONTH (e.dataEmprestimo), a.nomeAssunto;

----------------------------------------------------------------------------------------------------------------
5 - Um	gráfico	informando o total de livros que foram reservados e emprestados, considerando o último mês.

A FAZER